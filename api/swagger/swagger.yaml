swagger: '2.0'
info:
  title: My trips app
  description: Simple app for managing trips using nodejs, mongo, express
  version: 1.0.0
  termsOfService: 'http://trips/terms/'
  contact:
    email: aliiin@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: localhost:4001
basePath: /api
tags:
  - name: trips
    description: Everything about your trips
schemes:
  - https
  - http
paths:
  /trips:
    get:
      tags:
        - trip
      summary: List trips
      description: Returns a list with all trips
      operationId: getTrip
      produces:
        - application/xml
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Trip'
        '400':
          description: Invalid status value
  '/trip/{id}':
    get:
      tags:
        - trip
      summary: Find trip by ID
      description: Returns a single trip
      operationId: getTripById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of trip to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Trip'
        '400':
          description: Invalid ID supplied
        '404':
          description: Trip not found
    post:
      tags:
        - trip
      summary: Updates a Trip with form data
      description: ''
      operationId: updateTripWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: formData
          description: ID of Trip that needs to be updated
          required: true
          type: integer
          format: int64
        - name: startCity
          in: formData
          description: City from where user left in trip
          required: true
          type: string
        - name: endCity
          in: formData
          description: City where user arrived
          required: true
          type: string
        - name: price
          in: formData
          description: Cost of the trip
          required: true	
          type: integer
        - name: date
          in: formData
          description: Date of the trip
          required: true
          type: date-time
        - name: description
          in: formData
          description: Details of the trip
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - Trip
      summary: Deletes a Trip
      description: ''
      operationId: deleteTrip
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Trip id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Trip not found
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

definitions:
  Trip:
    type: object
    properties:
      id:
        type: integer
        format: int64
      startCity:
        type: string
      endCity:
        type: string
      price:
        type: integer
      date:
        type: string
      description:
        type: string
    xml:
      name: Trip
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
    xml:
      name: User
 